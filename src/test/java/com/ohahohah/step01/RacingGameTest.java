package com.ohahohah.step01;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class RacingGameTest {

  RacingGame rc;

    @Before
    public void setUp() {
      this.rc = new RacingGame();
    }

    @After
    public void tearDown() {
    }

  /**
    기능 요구사항
     # 프로그래밍 요구사항
     - 메소드가 너무 많은 일을 하지 않도록 분리하기 위해 노력해 본다.
     - 규칙 2: else 예약어를 쓰지 않는다.
     - 모든 로직에 단위 테스트를 구현한다. 단, UI(System.out, System.in) 로직은 제외
     - naming convention을 지키면서 프로그래밍한다.

     # 기능 요구사항
     초간단 자동차 경주 게임을 구현한다.
     - 입력 : 자동차 대수, 이동 횟수(= 횟수가 끝난 시점에서 가장 멀리 간 자동차가 우승함)
     - n대의 자동차는 각각 횟수마다 전진 또는 멈춤을 선택
     - 전진 조건 - 0에서 9 사이에서 random 값을 구한 후 random 값이 4이상일 경우만 전진가능
     - 자동차의 상태를 화면에 출력한다. 어느 시점에 출력할 것인지에 대한 제약은 없다. - 상태 출력

     # 세부 구현
     - 두 개의 숫자를 띄어쓰기로 입력받음(자동차_댓수 이동_횟수 / e.g. 3 5)
     - 경주참가하는 자동차별로 이동횟수 상태 저장
     - 각 자동차의 각 횟수마다 랜덤값을 생성
       - e.g. 3대 3회차 이동횟수 있다고 가정했을때, 1회차 첫번째 차 - 랜덤값 생성, 1회차 두번쨰 차 - 랜덤값 생성,...
       - 자동차의 횟수별 전진 상태(몇 칸 이동했는지) 저장
         - ~생성된 자동차는 현재까지 이동한 횟수 정보를 가지고 있어야함~
           - 이동할때마다 상태 출력하면 정보 필요없음
     - 전진을 출력함 - 0에서 9 사이에서 random 값을 구한 후 random 값이 4이상일 경우
     - 회차가 증가할때마다 자동차별 게임상태(횟수는 매회 증가해야함. 전진거리는 변하거나 변하지 않을 수 있음)를 변화시킴
     - 화면에 출력

     # 테스트 목록
     ## 입력
     - 숫자가 아닐 경우 IllegalArgumentException 던짐
     - 입력받은 자동차수대로 자동차 인스턴스 생성

     ## 전진
     - [테스트불가]~random값 범위가 0에서 9사이인지 확인~
     - [테스트불가]~랜덤값에 맞추어 전진 또는 멈춤하는지 확인~
     - [테스트불가]~횟수가 증가할때 랜덤값을 생성하는지 확인~
     - [테스트불가]~랜덤값이 4이상이면 전진상태를 나타내는지 확인~
     - [테스트조건이 모호함]~회차가 증가할때마다 자동차별 게임상태가 변하는지 확인~
     - [필요없음]경주참가하는 자동차별로 이동횟수 상태 저장
     - [필요없음]입력한 회차만큼 게임이 진행되었을때 게임이 종료되는지 확인

     ## UI (테스트 불가)
     - 회차별 상태를 출력하는지 확인
    **/

  @Test
  public void 입력받은_자동차수대로_자동차_인스턴스_생성() {
      assertThat(rc.createCars(3).size()).isEqualTo(3);
  }


}